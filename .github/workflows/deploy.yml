# # merges to main
# # set up container to ecs
# # teardown old container

# # name: Something

# # on:
# name: Node.js Deploy

# on:
#   release:
#     types: [published]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: server
#     steps:
#       - uses: actions/checkout@v3
#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v3
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: 'npm'
#           cache-dependency-path: server/package-lock.json

#       - run: npm ci
#       - run: npm run build
#       - run: cp -R build/ /app/
#       - name: Build and push Docker image
#         uses: actions/docker/cli@v1
#         with:
#           args: build -t docker.io/mroshii/dnd:${{ github.ref }} /app/
#         env:
#           DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#           DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

name: Deploy Node.js App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Build a production-ready version of the app
      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      # Build a Docker image based on the built files
      - name: Build Docker image
        uses: actions/docker/cli@v1
        with:
          args: build -t my-app:latest .

      # Push the Docker image to a registry (e.g. Docker Hub)
      - name: Push Docker image
        uses: actions/docker/cli@v1
        with:
          args: push my-app:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      # Set up the Amazon EC2 instance
      - name: Set up EC2 instance
        uses: aws-actions/ec2-create-instance@v1
        with:
          instance-type: t2.micro
          ami: ami-0dba2cb6798deb6d8
          region: us-east-1
          key-name: my-key-pair
          subnet-id: subnet-12345678
          security-group-ids: sg-12345678
          iam-instance-profile: my-instance-profile
          tags: |
            {
              "Name": "my-app"
            }
      # Wait for the EC2 instance to be fully set up and running
      - name: Wait for EC2 instance
        id: wait-for-ec2
        uses: aws-actions/ec2-wait-instance-running@v1
        with:
          instance-ids: ${{ steps.ec2-create-instance.outputs.instance-ids }}
          region: us-east-1
      # Get the public IP address of the EC2 instance
      - name: Get EC2 public IP
        id: get-ec2-public-ip
        run: |
          echo "EC2 public IP: ${{ steps.wait-for-ec2.outputs.public-ip }}"
          echo "::set-output name=ec2-public-ip::${{ steps.wait-for-ec2.outputs.public-ip }}"
      # Run a script on the EC2 instance to deploy the app
      - name: Deploy app on EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.get-ec2-public-ip.outputs.ec2-public-ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Stop and remove any existing Docker containers
            docker stop my-app || true
            docker rm my-app || true

            #
